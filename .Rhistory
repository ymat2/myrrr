)
}
}
library(ggplot2)
g = ggplot(mpg) +
aes(x = cty, y = hwy, color = drv) +
geom_point(size = 2) +
theme_my(base_size = 16)
g
usus
g = ggplot(mpg) +
aes(x = cty, y = hwy, color = drv) +
geom_point(size = 2) +
theme_my(base_size = 16)
#' Custom theme for ggplot2
#'
#' @description
#' `theme_my()` slightly modifies [ggplot2::theme_bw()] or [ggplot2::theme_test()]
#' @rdname ggtheme
#' @export
theme_my = function(theme = "bw", base_size = 11, base_family = "",
base_line_size = base_size/22,
base_rect_size = base_size/22) {
if (theme == "bw") {
ggplot2::theme_bw(
base_size = base_size,
base_family = base_family,
base_line_size = base_line_size,
base_rect_size = base_rect_size
) +
ggplot2::theme(
panel.background = ggplot2::element_rect(fill = NA, color = NA),
panel.grid.minor = ggplot2::element_blank(),
axis.title = ggplot2::element_text(colour = "#444444"),
axis.text = ggplot2::element_text(colour = "#444444"),
axis.line = ggplot2::element_line(colour = "red"),
axis.ticks = ggplot2::element_line(colour = "#444444"),
legend.title = ggplot2::element_text(colour = "#444444"),
legend.text = ggplot2::element_text(colour = "#444444"),
legend.background = ggplot2::element_rect(fill = NA),
legend.key = ggplot2::element_rect(fill = NA)
)
}
}
g = ggplot(mpg) +
aes(x = cty, y = hwy, color = drv) +
geom_point(size = 2) +
theme_my(base_size = 16)
g
#' Custom theme for ggplot2
#'
#' @description
#' `theme_my()` slightly modifies [ggplot2::theme_bw()] or [ggplot2::theme_test()]
#' @rdname ggtheme
#' @export
theme_my = function(theme = "bw", base_size = 11, base_family = "",
base_line_size = base_size/22,
base_rect_size = base_size/22) {
if (theme == "bw") {
ggplot2::theme_bw(
base_size = base_size,
base_family = base_family,
base_line_size = base_line_size,
base_rect_size = base_rect_size
) +
ggplot2::theme(
panel.background = ggplot2::element_rect(fill = NA, color = NA),
panel.grid.minor = ggplot2::element_blank(),
axis.title = ggplot2::element_text(colour = "#444444"),
axis.text = ggplot2::element_text(colour = "#444444"),
axis.line = ggplot2::element_line(colour = "red"),
axis.line.r = ggplot2::element_line(colour = "green"),
axis.ticks = ggplot2::element_line(colour = "#444444"),
legend.title = ggplot2::element_text(colour = "#444444"),
legend.text = ggplot2::element_text(colour = "#444444"),
legend.background = ggplot2::element_rect(fill = NA),
legend.key = ggplot2::element_rect(fill = NA)
)
}
}
library(ggplot2)
g = ggplot(mpg) +
aes(x = cty, y = hwy, color = drv) +
geom_point(size = 2) +
theme_my(base_size = 16)
g
#' Custom theme for ggplot2
#'
#' @description
#' `theme_my()` slightly modifies [ggplot2::theme_bw()] or [ggplot2::theme_test()]
#' @rdname ggtheme
#' @export
theme_my = function(theme = "bw", base_size = 11, base_family = "",
base_line_size = base_size/22,
base_rect_size = base_size/22) {
if (theme == "bw") {
ggplot2::theme_bw(
base_size = base_size,
base_family = base_family,
base_line_size = base_line_size,
base_rect_size = base_rect_size
) +
ggplot2::theme(
panel.background = ggplot2::element_rect(fill = NA, color = NA),
panel.grid.minor = ggplot2::element_blank(),
axis.title = ggplot2::element_text(colour = "#444444"),
axis.text = ggplot2::element_text(colour = "#444444"),
axis.line = ggplot2::element_line(colour = "red"),
axis.line.x.top = ggplot2::element_line(colour = "green"),
axis.ticks = ggplot2::element_line(colour = "#444444"),
legend.title = ggplot2::element_text(colour = "#444444"),
legend.text = ggplot2::element_text(colour = "#444444"),
legend.background = ggplot2::element_rect(fill = NA),
legend.key = ggplot2::element_rect(fill = NA)
)
}
}
g = ggplot(mpg) +
aes(x = cty, y = hwy, color = drv) +
geom_point(size = 2) +
theme_my(base_size = 16)
g
#' Custom theme for ggplot2
#'
#' @description
#' `theme_my()` slightly modifies [ggplot2::theme_bw()] or [ggplot2::theme_test()]
#' @rdname ggtheme
#' @export
theme_my = function(theme = "bw", base_size = 11, base_family = "",
base_line_size = base_size/22,
base_rect_size = base_size/22) {
if (theme == "bw") {
ggplot2::theme_bw(
base_size = base_size,
base_family = base_family,
base_line_size = base_line_size,
base_rect_size = base_rect_size
) +
ggplot2::theme(
panel.background = ggplot2::element_rect(fill = NA, color = NA),
panel.grid.minor = ggplot2::element_blank(),
axis.title = ggplot2::element_text(colour = "#444444"),
axis.text = ggplot2::element_text(colour = "#444444"),
#axis.line = ggplot2::element_line(colour = "#444444"),
axis.line.r = ggplot2::element_line(colour = "red"),
axis.ticks = ggplot2::element_line(colour = "#444444"),
legend.title = ggplot2::element_text(colour = "#444444"),
legend.text = ggplot2::element_text(colour = "#444444"),
legend.background = ggplot2::element_rect(fill = NA),
legend.key = ggplot2::element_rect(fill = NA)
)
}
}
g = ggplot(mpg) +
aes(x = cty, y = hwy, color = drv) +
geom_point(size = 2) +
theme_my(base_size = 16)
g
g = ggplot(mpg) +
aes(x = cty, y = hwy, color = drv) +
geom_point(size = 2) +
theme_my(base_size = 16) +
theme(legend.position = "inside")
g
g = ggplot(mpg) +
aes(x = cty, y = hwy, color = drv) +
geom_point(size = 2) +
theme_my(base_size = 16, theme = "test") +
theme(legend.position = "inside")
g
#' Custom theme for ggplot2
#'
#' @description
#' `theme_my()` slightly modifies [ggplot2::theme_bw()] or [ggplot2::theme_test()]
#' @rdname ggtheme
#' @export
theme_my = function(theme = "bw", base_size = 11, base_family = "",
base_line_size = base_size/22,
base_rect_size = base_size/22) {
common_theme = function() {
ggplot2::theme(
panel.background = ggplot2::element_rect(fill = NA, color = NA),
axis.title = ggplot2::element_text(colour = "#444444"),
axis.text = ggplot2::element_text(colour = "#444444"),
axis.line = ggplot2::element_line(colour = "#444444"),
axis.ticks = ggplot2::element_line(colour = "#444444"),
legend.title = ggplot2::element_text(colour = "#444444"),
legend.text = ggplot2::element_text(colour = "#444444"),
legend.background = ggplot2::element_rect(fill = NA),
legend.key = ggplot2::element_rect(fill = NA)
)
}
if (theme == "bw") {
ggplot2::theme_bw(
base_size = base_size,
base_family = base_family,
base_line_size = base_line_size,
base_rect_size = base_rect_size
) +
common_theme() +
ggplot2::theme(panel.grid.minor = ggplot2::element_blank())
} elif (theme == "test") {
#' Custom theme for ggplot2
#'
#' @description
#' `theme_my()` slightly modifies [ggplot2::theme_bw()] or [ggplot2::theme_test()]
#' @rdname ggtheme
#' @export
theme_my = function(theme = "bw", base_size = 11, base_family = "",
base_line_size = base_size/22,
base_rect_size = base_size/22) {
common_theme = function() {
ggplot2::theme(
panel.background = ggplot2::element_rect(fill = NA, color = NA),
axis.title = ggplot2::element_text(colour = "#444444"),
axis.text = ggplot2::element_text(colour = "#444444"),
axis.line = ggplot2::element_line(colour = "#444444"),
axis.ticks = ggplot2::element_line(colour = "#444444"),
legend.title = ggplot2::element_text(colour = "#444444"),
legend.text = ggplot2::element_text(colour = "#444444"),
legend.background = ggplot2::element_rect(fill = NA),
legend.key = ggplot2::element_rect(fill = NA)
)
}
if (theme == "bw") {
ggplot2::theme_bw(
base_size = base_size,
base_family = base_family,
base_line_size = base_line_size,
base_rect_size = base_rect_size
) +
common_theme() +
ggplot2::theme(panel.grid.minor = ggplot2::element_blank())
} else if (theme == "test") {
ggplot2::theme_test(
base_size = base_size,
base_family = base_family,
base_line_size = base_line_size,
base_rect_size = base_rect_size
) +
common_theme()
}
}
g = ggplot(mpg) +
aes(x = cty, y = hwy, color = drv) +
geom_point(size = 2) +
theme_my(base_size = 16, theme = "test") +
theme(legend.position = "inside")
g
#' Custom theme for ggplot2
#'
#' @description
#' `theme_my()` slightly modifies [ggplot2::theme_bw()] or [ggplot2::theme_test()]
#' @rdname ggtheme
#' @export
theme_my = function(theme = "bw", base_size = 11, base_family = "",
base_line_size = base_size/22,
base_rect_size = base_size/22) {
common_theme = function() {
ggplot2::theme(
panel.background = ggplot2::element_rect(fill = NA, color = NA),
axis.title = ggplot2::element_text(colour = "#444444"),
axis.text = ggplot2::element_text(colour = "red"),
axis.line = ggplot2::element_line(colour = "#444444"),
axis.ticks = ggplot2::element_line(colour = "#444444"),
legend.title = ggplot2::element_text(colour = "#444444"),
legend.text = ggplot2::element_text(colour = "#444444"),
legend.background = ggplot2::element_rect(fill = NA),
legend.key = ggplot2::element_rect(fill = NA)
)
}
if (theme == "bw") {
ggplot2::theme_bw(
base_size = base_size,
base_family = base_family,
base_line_size = base_line_size,
base_rect_size = base_rect_size
) +
common_theme() +
ggplot2::theme(panel.grid.minor = ggplot2::element_blank())
} else if (theme == "test") {
ggplot2::theme_test(
base_size = base_size,
base_family = base_family,
base_line_size = base_line_size,
base_rect_size = base_rect_size
) +
common_theme()
}
}
g = ggplot(mpg) +
aes(x = cty, y = hwy, color = drv) +
geom_point(size = 2) +
theme_my(base_size = 16, theme = "test") +
theme(legend.position = "inside")
g
#' Custom theme for ggplot2
#'
#' @description
#' `theme_my()` slightly modifies [ggplot2::theme_bw()] or [ggplot2::theme_test()]
#' @rdname ggtheme
#' @export
theme_my = function(theme = "bw", base_size = 11, base_family = "",
base_line_size = base_size/22,
base_rect_size = base_size/22) {
common_theme = function() {
ggplot2::theme(
panel.background = ggplot2::element_rect(fill = NA, color = NA),
axis.title = ggplot2::element_text(colour = "#444444"),
axis.text = ggplot2::element_text(colour = "#444444"),
axis.line = ggplot2::element_line(colour = "#444444"),
axis.ticks = ggplot2::element_line(colour = "#444444"),
legend.title = ggplot2::element_text(colour = "#444444"),
legend.text = ggplot2::element_text(colour = "#444444"),
legend.background = ggplot2::element_rect(fill = NA),
legend.key = ggplot2::element_rect(fill = NA)
)
}
if (theme == "bw") {
ggplot2::theme_bw(
base_size = base_size,
base_family = base_family,
base_line_size = base_line_size,
base_rect_size = base_rect_size
) +
common_theme() +
ggplot2::theme(panel.grid.minor = ggplot2::element_blank())
} else if (theme == "test") {
ggplot2::theme_test(
base_size = base_size,
base_family = base_family,
base_line_size = base_line_size,
base_rect_size = base_rect_size
) +
common_theme()
}
}
g = ggplot(mpg) +
aes(x = cty, y = hwy, color = drv) +
geom_point(size = 2) +
theme_my(base_size = 16, theme = "test") +
theme(legend.position = "inside")
g
devtools::check()
devtools::check()
?ggplot2::theme_bw
?ggplot2::theme_bw
devtools::check()
devtools::check()
library(tidyverse)
mpg
ggplot(mpg) +
aes(displ, cty) +
geom_point() +
facet_wrap(nrow = vars(model))
ggplot(mpg) +
aes(displ, cty) +
geom_point() +
facet_wrap(vars(model))
ggplot(mpg) +
aes(displ, cty) +
geom_point() +
facet_wrap(vars(drv))
ggplot(mpg) +
aes(displ, cty) +
geom_point() +
facet_grid(rows = vars(drv), cols = vars(fl))
ggplot(mpg) +
aes(displ, cty) +
geom_point() +
facet_grid(rows = vars(drv), cols = vars(cyl))
min(1, 2)
min(1, 2)
p = 0.001
min(7*p, 1)
p = 0.5
p = 0.5
min(7*p, 1)
#'
#' @description
#' `theme_my()` slightly modifies [ggplot2::theme_bw()] or [ggplot2::theme_test()]
#' @param theme "bw" or "test". Specifies theme_*().
#' @param base_size base font size, given in pts.
#' @param base_family base font family
#' @param base_line_size base size for line elements
#' @param base_rect_size base size for rect elements
#' @rdname ggtheme
#' @export
theme_my = function(theme = "bw", base_size = 11, base_family = "",
base_line_size = base_size/22,
base_rect_size = base_size/22) {
if (theme == "bw") {
ggplot2::theme_bw(
base_size = base_size,
base_family = base_family,
base_line_size = base_line_size,
base_rect_size = base_rect_size
) +
common_theme() +
ggplot2::theme(panel.grid.minor = ggplot2::element_blank())
} else if (theme == "test") {
ggplot2::theme_test(
base_size = base_size,
base_family = base_family,
base_line_size = base_line_size,
base_rect_size = base_rect_size
) +
common_theme()
}
}
#' @description
#' @description
#' Common settings for [ggplot2::theme()]
#' @rdname ggtheme
#' @description
#' Common settings for [ggplot2::theme()]
#' @rdname ggtheme
#' @export
common_theme = function() {
ggplot2::theme(
panel.background = ggplot2::element_rect(fill = NA, color = NA),
axis.title = ggplot2::element_text(colour = "#444444"),
axis.text = ggplot2::element_text(colour = "#444444"),
axis.line = ggplot2::element_line(colour = "#444444"),
axis.ticks = ggplot2::element_line(colour = "#444444"),
legend.title = ggplot2::element_text(colour = "#444444"),
legend.text = ggplot2::element_text(colour = "#444444"),
legend.background = ggplot2::element_rect(fill = NA),
legend.key = ggplot2::element_rect(fill = NA)
)
}
ggplot(mpg) +
aes(displ, cty) +
geom_point() +
facet_wrap(vars(drv)) +
common_theme()
}
#' @description
#' Custom settings for [ggplot2::facet_wrap()] and [ggplot2::facet_grid()]
#' @rdname ggtheme
#' @export
facet_theme = function() {
facet_theme = function() {
ggplot2::theme(
strip.background = element_rect(fill = NA, color = NA)
) + common_theme()
}
}
#' @description
#' Custom settings for [ggplot2::facet_wrap()] and [ggplot2::facet_grid()]
#' @rdname ggtheme
#' @export
facet_theme = function() {
ggplot2::theme(
strip.background = element_rect(fill = NA, color = NA)
) + common_theme()
}
library(tidyverse)
ggplot(mpg) +
aes(displ, cty) +
geom_point() +
facet_wrap(vars(drv))
ggplot(mpg) +
aes(displ, cty) +
geom_point() +
facet_wrap(vars(drv)) +
facet_theme()
ggplot(mpg) +
aes(displ, cty) +
geom_point() +
facet_grid(rows = vars(drv), cols = vars(cyl))
ggplot(mpg) +
aes(displ, cty) +
geom_point() +
facet_grid(rows = vars(drv), cols = vars(cyl)) +
facet_theme()
ggplot(mpg) +
aes(displ, cty) +
geom_point() +
facet_grid(rows = vars(drv), cols = vars(cyl)) +
theme_my() +
facet_theme()
ggplot2::theme(
strip.background = element_rect(fill = NA, color = NA)
)
facet_theme = function() {
ggplot2::theme(
strip.background = element_rect(fill = NA, color = NA)
)
}
ggplot(mpg) +
aes(displ, cty) +
geom_point() +
facet_wrap(vars(drv)) +
facet_theme()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
?setNames
?dplyr::all_of
devtools::check()
